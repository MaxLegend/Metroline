package metroline.screens.panel;

import metroline.MainFrame;

import metroline.core.time.ConstructionTimeProcessor;
import metroline.core.time.GameTime;
import metroline.core.world.World;
import metroline.core.world.economic.EconomyManager;
import metroline.objects.enums.TrainType;
import metroline.objects.gameobjects.*;
import metroline.objects.gameobjects.StationLabel;
import metroline.screens.worldscreens.normal.GameWorldScreen;
import metroline.screens.worldscreens.WorldScreen;
import metroline.util.MetroLogger;
import metroline.util.localizate.LngUtil;
import metroline.util.MathUtil;
import metroline.util.ui.UserInterfaceUtil;
import metroline.util.ui.StyleUtil;

import javax.swing.*;
import javax.swing.border.EmptyBorder;


import metroline.core.world.GameWorld;

import java.awt.*;
import java.awt.event.*;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * TODO –ü—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö, –ø–æ–∫–∞ –Ω–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –º–æ–∂–µ—Ç –ø–æ–≤–µ—Å–∏—Ç—å –∏–≥—Ä—É
 * TODO –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —á–µ—Ä–µ–∑ –º–µ—Ç–∫—É —Ç–æ–∂–µ
 * TODO –†–µ–º–æ–Ω—Ç —Å—Ç–∞–Ω—Ü–∏–π –¥–æ–¥–µ–ª–∞—Ç—å
 */
public class InfoWindow extends JWindow {
    private JLabel titleLabel;
    private JLabel infoLabel;
    private JProgressBar progressBar;
    private Timer updateTimer;
    public Object currentObject;
    private JPanel headerPanel;
    private JPanel contentPanel;
    private JButton closeButton;
    private JPanel editNamePanel;
    private JTextField nameEditField;
    private JButton saveNameButton;
    private JButton repairButton;
    private JLabel wearInfoLabel;

    private JButton toggleLabelButton;
    private boolean isUpdating = false;

    private static final Map<Object, InfoWindow> openWindows = new HashMap<>();
    public InfoWindow(Window owner) {
        super(owner); // –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º—ã –æ–∫–Ω–∞
        setBackground(new Color(0, 0, 0, 0));

        contentPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g.create();

                // –†–∏—Å—É–µ–º —Ç–µ–º–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(new Color(30, 30, 30, 240));
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), 12, 12);

                // –†–∏—Å—É–µ–º —Ç–æ–Ω–∫—É—é —Ä–∞–º–∫—É
                g2d.setColor(new Color(80, 80, 80, 150));
                g2d.drawRoundRect(0, 0, getWidth()-1, getHeight()-1, 12, 12);

                g2d.dispose();
            }
        };

        contentPanel.setLayout(new BorderLayout(5, 5));
        contentPanel.setBorder(new EmptyBorder(8, 10, 8, 10));
        contentPanel.setOpaque(false);

        // –ü–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ (—Ç–µ–ø–µ—Ä—å –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—é –≤—ã—Å–æ—Ç—É –æ–∫–Ω–∞)
        headerPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                // –†–∏—Å—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
                g.setColor(new Color(80, 80, 80, 150));
                g.drawLine(0, getHeight()-1, getWidth(), getHeight()-1);
            }
        };
        headerPanel.setOpaque(false);

        titleLabel = new JLabel("", SwingConstants.LEFT);
        titleLabel.setFont(StyleUtil.getMetrolineFont(13));
        titleLabel.setForeground(StyleUtil.FOREGROUND_COLOR);

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        closeButton = new JButton("√ó");
        closeButton.setFont(StyleUtil.getMetrolineFont(14));
        closeButton.setForeground(StyleUtil.FOREGROUND_COLOR);
        closeButton.setContentAreaFilled(false);
        closeButton.setBorderPainted(false);
        closeButton.setFocusPainted(false);
        closeButton.setMargin(new Insets(0, 0, 0, 0));
        closeButton.addActionListener(e -> hideWindow());

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–º–æ–Ω—Ç–∞
        repairButton = new JButton("\uD83D\uDD27");
        repairButton.setFont(StyleUtil.getMetrolineFont(14));
        repairButton.setForeground(StyleUtil.FOREGROUND_COLOR);
        repairButton.setContentAreaFilled(false);
        repairButton.setBorderPainted(false);
        repairButton.setFocusPainted(false);
        repairButton.setMargin(new Insets(0, 0, 0, 0));
        repairButton.addActionListener(e -> repairStation());

        toggleLabelButton = new JButton("üëÅ");
        toggleLabelButton.setFont(StyleUtil.getMetrolineFont(14));
        toggleLabelButton.setForeground(StyleUtil.FOREGROUND_COLOR);
        toggleLabelButton.setContentAreaFilled(false);
        toggleLabelButton.setBorderPainted(false);
        toggleLabelButton.setFocusPainted(false);
        toggleLabelButton.setMargin(new Insets(0, 0, 0, 0));
        toggleLabelButton.addActionListener(e -> toggleLabelVisibility());


        // –ù–û–í–´–ô –ö–û–î: –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 5, 0));
        rightPanel.setOpaque(false);
        rightPanel.add(toggleLabelButton);
        rightPanel.add(repairButton);
        rightPanel.add(closeButton);

        toggleLabelButton.setVisible(false);
        // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        JPanel titlePanel = new JPanel(new BorderLayout(10, 0));
        titlePanel.setOpaque(false);
        titlePanel.add(titleLabel, BorderLayout.CENTER); // –¢–µ–∫—Å—Ç —Å–ª–µ–≤–∞
        titlePanel.add(rightPanel, BorderLayout.EAST);   // –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞

        headerPanel.add(titlePanel, BorderLayout.NORTH);
        headerPanel.setBorder(new EmptyBorder(0, 0, 5, 0));

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        infoLabel = new JLabel();
        infoLabel.setFont(StyleUtil.getMetrolineFont(13));
        infoLabel.setForeground(new Color(200, 200, 200));

        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progressBar = new JProgressBar();
        progressBar.setPreferredSize(new Dimension(120, 14));
        progressBar.setForeground(new Color(79, 155, 155));
        progressBar.setBackground(new Color(60, 60, 60));
        progressBar.setStringPainted(true);
        progressBar.setVisible(false);
        progressBar.setBorder(BorderFactory.createEmptyBorder());

        // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        contentPanel.add(headerPanel, BorderLayout.NORTH);
        contentPanel.add(infoLabel, BorderLayout.CENTER);
        contentPanel.add(progressBar, BorderLayout.SOUTH);

        setContentPane(contentPanel);

        // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        updateTimer = new Timer(200, e -> updateInfo());
        updateTimer.start();
     //   initLabelToggleButton();
        initNameEditComponents();
        //     initWearComponents();
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        pack();
        KeyboardFocusManager.getCurrentKeyboardFocusManager()
                            .addPropertyChangeListener("activeWindow", evt -> {
                                Window activeWindow = (Window)evt.getNewValue();
                                if (activeWindow == getOwner()) {
                                    // –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≤–µ—Ä—Ö
                                    bringToFrontProperly();
                                } else if (isVisible()) {
                                    // –î—Ä—É–≥–æ–µ –æ–∫–Ω–æ –ø–æ–ª—É—á–∏–ª–æ —Ñ–æ–∫—É—Å - —É–±–∏—Ä–∞–µ–º alwaysOnTop
                                    setAlwaysOnTop(false);
                                }
                            });
    }
    private void repairStation() {
        if (currentObject instanceof Station) {
            Station station = (Station) currentObject;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏—é
            if (!station.canRepair()) {
                showRepairMessage("infoWnd.cannot_repair");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ–Ω–µ–≥
            if (getOwner() instanceof MainFrame) {
                MainFrame frame = (MainFrame) getOwner();
                if (frame.getCurrentScreen() instanceof GameWorldScreen) {
                    GameWorldScreen screen = (GameWorldScreen) frame.getCurrentScreen();
                    GameWorld world = (GameWorld) screen.getWorld();

                    float repairCost = station.getRepairCost();
                    if (world.canAfford(repairCost)) {
                        // –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–µ–º–æ–Ω—Ç
                        world.deductMoney(repairCost);
                        station.repair();

                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        updateInfo();

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–µ–º–æ–Ω—Ç–µ
                        showRepairMessage("infoWnd.repair_success", repairCost);
                    } else {
                        showRepairMessage("infoWnd.not_enough_money", repairCost);
                    }
                }
            }
        }
    }

    private void showRepairMessage(String messageKey, Object... args) {
        String message = LngUtil.translatable(messageKey, args);

        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ infoLabel
        infoLabel.setText("<html>" + message + "<br>" + infoLabel.getText().replace("<html>", "") + "</html>");

        // –ò–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        JOptionPane.showMessageDialog(this, message,
                LngUtil.translatable("infoWnd.repair_title"),
                JOptionPane.INFORMATION_MESSAGE);
    }
    private void toggleLabelVisibility() {
        if (currentObject instanceof Station) {
            Station station = (Station) currentObject;
            World world = station.getWorld();
            StationLabel label = station.getLabel();

            if (label != null) {
                label.setVisible(!label.isVisible());

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∫–Ω–æ–ø–∫–∏
                updateLabelToggleButtonIcon();

                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω
                if (getOwner() instanceof MainFrame) {
                    ((MainFrame)getOwner()).getCurrentScreen().repaint();
                }
            }
        }
    }

    private void updateLabelToggleButtonIcon() {
        if (currentObject instanceof Station) {
            Station station = (Station) currentObject;
            StationLabel label = station.getLabel();

            if (label != null) {
                if (label.isVisible()) {
                    toggleLabelButton.setText("‚óà");
                    toggleLabelButton.setToolTipText(LngUtil.translatable("infoWnd.hide_label"));
                } else {
                    toggleLabelButton.setText("‚óá");
                    toggleLabelButton.setToolTipText(LngUtil.translatable("infoWnd.show_label"));
                }
            }
        }
    }

    private void bringToFrontProperly() {
        if (getOwner() != null) {
            // 1. –°–±—Ä–∞—Å—ã–≤–∞–µ–º alwaysOnTop
            setAlwaysOnTop(false);

            // 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
            toFront();

            // 3. –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤ —Ñ–æ–∫—É—Å–µ - –¥–µ–ª–∞–µ–º –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –æ–∫–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if (getOwner().isFocused()) {
                setAlwaysOnTop(true);
            }
        }
    }
    private void initNameEditComponents() {

        // –ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
        editNamePanel = new JPanel(new BorderLayout(5, 0));
        editNamePanel.setOpaque(false);
        editNamePanel.setVisible(false);


        nameEditField = new JTextField();
        nameEditField.setFont(StyleUtil.getMetrolineFont(13));
        nameEditField.setForeground(StyleUtil.FOREGROUND_COLOR);
        nameEditField.setBackground(new Color(60, 60, 60));
        nameEditField.setBorder(BorderFactory.createCompoundBorder());

        saveNameButton = new JButton("\uD83D\uDCBE");
        saveNameButton.setFont(StyleUtil.getMetrolineFont(14));
        saveNameButton.setForeground(Color.WHITE);
        saveNameButton.setContentAreaFilled(false);
        saveNameButton.setBorderPainted(false);
        saveNameButton.setFocusPainted(false);
        saveNameButton.setMargin(new Insets(0, 5, 0, 0));
        saveNameButton.addActionListener(e -> saveStationName());
        nameEditField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    cancelNameEditing();
                }
            }
        });
        nameEditField.addActionListener(e -> saveStationName());

        editNamePanel.add(nameEditField, BorderLayout.CENTER);
        editNamePanel.add(saveNameButton, BorderLayout.EAST);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
        MouseAdapter dragAdapter = new MouseAdapter() {
            private Point dragStartPoint;
            private boolean isDragging = false;

            public void mousePressed(MouseEvent e) {
                dragStartPoint = e.getLocationOnScreen();
                isDragging = false;
            }

            public void mouseDragged(MouseEvent e) {
                if (dragStartPoint != null) {

                    isDragging = true;
                    Point currentPoint = e.getLocationOnScreen();
                    int deltaX = currentPoint.x - dragStartPoint.x;
                    int deltaY = currentPoint.y - dragStartPoint.y;
                    int newX = getLocation().x + deltaX;
                    int newY = getLocation().y + deltaY;
                    Rectangle bounds = getAdjustedBounds(newX, newY);

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    setLocation(bounds.x, bounds.y);
                    dragStartPoint = currentPoint;
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (isDragging) {
                    e.consume(); // –û—Ç–º–µ–Ω—è–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
                }
            }
        };

        // –û—Å–æ–±—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        nameEditField.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –≤—ã–¥–µ–ª–µ–Ω
                if (nameEditField.getSelectedText() == null || nameEditField.getSelectedText().isEmpty()) {
                    dragAdapter.mousePressed(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                dragAdapter.mouseReleased(e);
            }
        });

        nameEditField.addMouseMotionListener(dragAdapter);
        saveNameButton.addMouseListener(dragAdapter);
        saveNameButton.addMouseMotionListener(dragAdapter);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        titleLabel.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && currentObject instanceof Station) {
                    startNameEditing((Station) currentObject);
                }
            }

            @Override
            public void mousePressed(MouseEvent e) {
                dragAdapter.mousePressed(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                dragAdapter.mouseReleased(e);
            }
        });

        titleLabel.addMouseMotionListener(dragAdapter);
        contentPanel.addMouseListener(dragAdapter);
        contentPanel.addMouseMotionListener(dragAdapter);
        headerPanel.addMouseListener(dragAdapter);
        headerPanel.addMouseMotionListener(dragAdapter);

        editNamePanel.add(nameEditField, BorderLayout.CENTER);
        editNamePanel.add(saveNameButton, BorderLayout.EAST);

    }

    private Rectangle getAdjustedBounds(int x, int y) {
        Window owner = getOwner();
        if (owner == null) {
            return new Rectangle(x, y, getWidth(), getHeight());
        }

        // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã MainFrame
        Rectangle ownerBounds = owner.getBounds();
        int maxX = ownerBounds.x + ownerBounds.width - getWidth();
        int maxY = ownerBounds.y + ownerBounds.height - getHeight();

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        int adjustedX = Math.max(ownerBounds.x, Math.min(x, maxX));
        int adjustedY = Math.max(ownerBounds.y, Math.min(y, maxY));

        return new Rectangle(adjustedX, adjustedY, getWidth(), getHeight());
    }
    private void cancelNameEditing() {
        JPanel titlePanel = (JPanel) editNamePanel.getParent();
        titlePanel.remove(editNamePanel);
        titlePanel.add(titleLabel, BorderLayout.CENTER);
        editNamePanel.setVisible(false);
        titlePanel.revalidate();
        titlePanel.repaint();
    }
    private void startNameEditing(Station station) {

        JPanel titlePanel = (JPanel) titleLabel.getParent();
        titlePanel.remove(titleLabel);
        titlePanel.add(editNamePanel, BorderLayout.CENTER);

        nameEditField.setText(station.getName());
        editNamePanel.setVisible(true);
        editNamePanel.setSize(0, titleLabel.getHeight());
        editNamePanel.setVisible(true);

        Timer animTimer = new Timer(10, new ActionListener() {
            int width = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                if (width < titlePanel.getWidth()) {
                    width += 20;
                    editNamePanel.setSize(width, titleLabel.getHeight());
                    titlePanel.revalidate();
                } else {
                    ((Timer)e.getSource()).stop();
                }
            }
        });
        animTimer.start();
        titlePanel.revalidate();
        titlePanel.repaint();

        nameEditField.requestFocusInWindow();
        nameEditField.selectAll();


    }
    private boolean isEditingName = false;
    private void saveStationName() {
        if (isEditingName || !(currentObject instanceof Station)) return;
        MetroLogger.logInfo("START saveStationName");
        isEditingName = true;
        try {
            Station station = (Station) currentObject;
            String newName = nameEditField.getText().trim();

            if (!newName.isEmpty() && !newName.equals(station.getName())) {
                station.setName(newName);
                titleLabel.setText(newName);

                // –£–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ updateInfo() - –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∫—É—Ä—Å–∏—é!
                // updateInfo(); // ‚Üê –£–ë–†–ê–¢–¨ —ç—Ç—É —Å—Ç—Ä–æ–∫—É!

                // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                Color stationColor = station.getStationColor().getColor();
                titleLabel.setText("<html><font color='" +
                        String.format("#%06X", stationColor.getRGB() & 0xFFFFFF) + "'>" +
                        newName + "</font></html>");
                MetroLogger.logInfo("saveStationName " + newName);
            }

            cancelNameEditing();

            // –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞, –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if (getOwner() instanceof MainFrame) {
                ((MainFrame)getOwner()).getCurrentScreen().repaint();
                MetroLogger.logInfo("repaint ");
            }
        } finally {
            isEditingName = false;
        }
    }
    public static void updateWindowsVisibility(MainFrame frame) {
        boolean shouldShow = frame.getCurrentScreen() instanceof WorldScreen ;
        for (Window window : frame.getOwnedWindows()) {
            if (window instanceof InfoWindow) {
                window.setVisible(shouldShow);
            }
        }
    }
    public void displayTrainInfo(Train train, Point location) {
        toggleLabelButton.setVisible(false);
        this.currentObject = train;
        updateInfo();
        setLocation(location);
        setVisible(true);
        pack();
    }

    public void displayStationInfo(Station station, Point location) {
        if (openWindows.containsKey(station)) {
            InfoWindow existingWindow = openWindows.get(station);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
            existingWindow.setLocation(location);
            existingWindow.updateInfo();
            existingWindow.setVisible(true);
            existingWindow.toFront();
            return;
        }

    this.currentObject = station;
    if (editNamePanel.isVisible()) {
        saveStationName();
    }
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞—Ä—Ç—É –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
        openWindows.put(station, this);


    Color stationColor = station.getStationColor().getColor();
    titleLabel.setText("<html><font color='" +
            String.format("#%06X", stationColor.getRGB() & 0xFFFFFF) + "'>" +
            station.getName() + "</font></html>");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∫–∏
    toggleLabelButton.setVisible(true);
    updateLabelToggleButtonIcon();

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    JPanel titlePanel = (JPanel) titleLabel.getParent();
    if (titlePanel != null && !Arrays.asList(titlePanel.getComponents()).contains(toggleLabelButton)) {
        titlePanel.add(toggleLabelButton, BorderLayout.WEST);
    }

    updateInfo();
    setLocation(location);
    setVisible(true);
    pack();
}
    public void displayTunnelInfo(Tunnel tunnel, Point location) {
        if (openWindows.containsKey(tunnel)) {
            InfoWindow existingWindow = openWindows.get(tunnel);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
            existingWindow.setLocation(location);
            existingWindow.updateInfo();
            existingWindow.setVisible(true);
            existingWindow.toFront();
            return;
        }
        openWindows.put(tunnel, this);

        toggleLabelButton.setVisible(false);
        repairButton.setVisible(false);
        this.currentObject = tunnel;
        updateInfo();
        setLocation(location);
        setVisible(true);
        pack(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    }
    public void displayGameplayUnitsInfo(GameplayUnits gUnits, Point location) {
        if (openWindows.containsKey(gUnits)) {
            InfoWindow existingWindow = openWindows.get(gUnits);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
            existingWindow.setLocation(location);
            existingWindow.updateInfo();
            existingWindow.setVisible(true);
            existingWindow.toFront();
            return;
        }
        openWindows.put(gUnits, this);
        toggleLabelButton.setVisible(false);
        repairButton.setVisible(false);
        this.currentObject = gUnits;
        updateInfo();
        setLocation(location);
        setVisible(true);
        pack(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    }
    public void displayLabelInfo(StationLabel stationLabel, Point location) {
        if (openWindows.containsKey(stationLabel)) {
            InfoWindow existingWindow = openWindows.get(stationLabel);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
            existingWindow.setLocation(location);
            existingWindow.updateInfo();
            existingWindow.setVisible(true);
            existingWindow.toFront();
            return;
        }
        openWindows.put(stationLabel, this);
        repairButton.setVisible(false);
        toggleLabelButton.setVisible(false);
        this.currentObject = stationLabel;
        updateInfo();
        setLocation(location);
        setVisible(true);
        pack(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    }
    float revenue, lastRevenue;
    public void updateInfo() {
        if (isUpdating) return;
        isUpdating = true;
        // –ü–æ–ª—É—á–∞–µ–º —ç–∫—Ä–∞–Ω –º–∏—Ä–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å GameWorldScreen –∏–ª–∏ SandboxWorldScreen)
        try {
            WorldScreen worldScreen = null;
            if (getOwner() instanceof MainFrame) {
                MainFrame frame = (MainFrame) getOwner();
                if (frame.getCurrentScreen() instanceof WorldScreen) {
                    worldScreen = (WorldScreen) frame.getCurrentScreen();
                }
            }

            if (worldScreen == null || !(worldScreen.getWorld() instanceof GameWorld)) {
                return;
            }

            GameWorld world = (GameWorld) worldScreen.getWorld();
            EconomyManager economyManager = world.getEconomyManager();

            if (currentObject instanceof Station) {
                Station station = (Station) currentObject;
                GameTime gameTime = world.getGameTime();
                long constructionDate = station.getConstructionDate();
                long currentTime = gameTime.getCurrentTimeMillis();
                long age = currentTime - constructionDate;

                Color stationColor = station.getStationColor().getColor();
                titleLabel.setText("<html><font color='" +
                        String.format("#%06X", stationColor.getRGB() & 0xFFFFFF) + "'>" +
                        station.getName() + "</font></html>");

                StringBuilder info = new StringBuilder("<html>");
                info.append(LngUtil.translatable("infoWnd.position") + " ").append(station.getX()).append(", ").append(station.getY()).append("<br>");
                info.append(LngUtil.translatable("infoWnd.type") + " ").append(station.getType().getLocalizedName()).append("<br>");

               float currentRevenue = economyManager.preCalculateStationRevenue(station);

                info.append(LngUtil.translatable("infoWnd.revenue") + " ")
                    .append(MathUtil.round(currentRevenue, 2))
                    .append(" M (")
                    .append(MathUtil.round((1 - station.getWearLevel()) * 100, 0))
                    .append("%)<br>");

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º EconomyManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                float constructionCost = economyManager.calculateStationConstructionCost(station.getX(), station.getY());
                info.append(LngUtil.translatable("infoWnd.cost") + " ").append(MathUtil.round(constructionCost, 2)).append(" M").append("<br>");

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º EconomyManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                float upkeep = economyManager.calculateStationUpkeep(station);
                info.append(LngUtil.translatable("infoWnd.upkeep") + " ").append(MathUtil.round(upkeep, 4)).append(" M").append("<br>");

                info.append(String.format("<html>%s: %s<br>%s: %s</html>",
                        LngUtil.translatable("infoWnd.station_build_date"),
                        gameTime.formatDate(constructionDate),
                        LngUtil.translatable("infoWnd.station_wear_level"),
                        String.format("%.0f%%", station.getWearLevel() * 100)));

                infoLabel.setText(info.toString());
                updateProgress(world);

            } else if (currentObject instanceof Train) {
                Train train = (Train) currentObject;
                titleLabel.setText(LngUtil.translatable("infoWnd.train.cost." + train.getTrainType().name().toLowerCase()));

                StringBuilder info = new StringBuilder("<html>");
                info.append(LngUtil.translatable("infoWnd.position") + " ").append(MathUtil.round(train.getCurrentX(), 2)).append(", ").append(MathUtil.round(train.getCurrentY(), 2)).append("<br>");
                info.append(LngUtil.translatable("infoWnd.train_speed") + " ").append(train.getNormalizedSpeed()).append("<br>");
                if (!train.isMoving())
                    info.append(LngUtil.translatable("infoWnd.train_wait_time") + " ").append(train.getWaitTimer() + " s").append("<br>");
                infoLabel.setText(info.toString());

            } else if (currentObject instanceof Tunnel) {
                Tunnel tunnel = (Tunnel) currentObject;
                titleLabel.setText(LngUtil.translatable("infoWnd.tunnel_title"));

                StringBuilder info = new StringBuilder("<html>");
                info.append(LngUtil.translatable("infoWnd.tunnel_from") + " ").append(tunnel.getStart().getName()).append("<br>");
                info.append(LngUtil.translatable("infoWnd.tunnel_to") + " ").append(tunnel.getEnd().getName()).append("<br>");
                info.append(LngUtil.translatable("infoWnd.tunnel_length") + " ").append(tunnel.getLength()).append(" " + LngUtil.translatable("infoWnd.tunnel_segments") + " <br>");
                info.append(LngUtil.translatable("infoWnd.tunnel_type") + " ").append(tunnel.getType().getLocalizedName() + "<br>");

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º EconomyManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞
                float cost = economyManager.calculateTunnelConstructionCost(tunnel);
                info.append(LngUtil.translatable("infoWnd.tunnel_cost") + " ").append(MathUtil.round(cost, 2)).append(" M" + " <br>");

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º EconomyManager –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                float upkeep = economyManager.calculateTunnelUpkeep(tunnel);
                info.append(LngUtil.translatable("infoWnd.upkeep") + " ").append(MathUtil.round(upkeep, 4)).append(" M").append("<br>");

                infoLabel.setText(info.toString());
                updateProgress(world);

            } else if (currentObject instanceof GameplayUnits) {
                GameplayUnits gUnits = (GameplayUnits) currentObject;
                titleLabel.setText(LngUtil.translatable(gUnits.getType().getLocalizedName()));

                StringBuilder info = new StringBuilder("<html>");
                info.append(LngUtil.translatable("infoWnd.gUnits") + " ").append(gUnits.getType().getIncomeMultiplier() + " %").append("<br>");
                info.append(LngUtil.translatable("infoWnd.position") + " ").append(gUnits.getX()).append(", ").append(gUnits.getY()).append("<br>");
                info.append(LngUtil.translatable("infoWnd.condition") + " ").append(gUnits.getCondition()).append("<br>");
                if (gUnits.isAbandoned())
                    info.append(LngUtil.translatable("infoWnd.isAbandoned") + " ").append(gUnits.isAbandoned()).append("<br>");
                infoLabel.setText(info.toString());

            } else if (currentObject instanceof StationLabel) {
                StationLabel stationLabel = (StationLabel) currentObject;
                titleLabel.setText(LngUtil.translatable(stationLabel.getText()));

                StringBuilder info = new StringBuilder("<html>");
                info.append(LngUtil.translatable("infoWnd.stationLabel") + " ").append(stationLabel.getText()).append("<br>");
                infoLabel.setText(info.toString());
            }

            pack(); // –ü–æ–¥–≥–æ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ–¥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        } finally {
            isUpdating = false;
        }
    }

    private void updateProgress(GameWorld world) {
        ConstructionTimeProcessor processor = world.getConstructionProcessor();

        if (currentObject instanceof Station) {
            Station station = (Station) currentObject;
            float progress = processor.getStationConstructionProgress(station);
            if (progress > 0 && progress < 1) {
                progressBar.setVisible(true);
                progressBar.setValue((int)(progress * 100));
                progressBar.setString((int)(progress * 100) + "%");
            } else {
                progressBar.setVisible(false);
            }
        } else if (currentObject instanceof Tunnel) {
            Tunnel tunnel = (Tunnel) currentObject;
            float progress = processor.getTunnelConstructionProgress(tunnel);
            if (progress > 0 && progress < 1) {
                progressBar.setVisible(true);
                progressBar.setValue((int)(progress * 100));
                progressBar.setString((int)(progress * 100) + "%");
            } else {
                progressBar.setVisible(false);
            }
        }
    }

    public void hideWindow() {
        toggleLabelButton.setVisible(false);
        if (editNamePanel.isVisible()) {
            saveStationName();
        }
        // –£–¥–∞–ª—è–µ–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ–∫–æ–Ω
        if (currentObject != null) {
            openWindows.remove(currentObject);
        }

        currentObject = null;
        setVisible(false);
        if (getOwner() instanceof MainFrame) {
            MainFrame frame = (MainFrame) getOwner();
            if (frame.getCurrentScreen() instanceof GameWorldScreen) {
                GameWorldScreen screen = (GameWorldScreen) frame.getCurrentScreen();
                screen.infoWindows.remove(this);
            }
        }
    }
    @Override
    public void dispose() {
        if (updateTimer != null) {
            updateTimer.stop();
        }
        if (currentObject != null) {
            openWindows.remove(currentObject);
        }
        super.dispose();
    }
    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            setAlwaysOnTop(true);
            updateInfo();
            pack();
        }
        super.setVisible(visible && getOwner().isVisible());
    }

}